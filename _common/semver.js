!function(t,r,e,i,s,a,n,o,c,h){"use strict";const m=t("./output-mgr.js");class p{prefixed;major;#t;#r;constructor(t,r,e,i=!0){this.prefixed=i,this.major=l(t)??0,this.#t=l(r),this.#r=l(e)}static cmp(t,r){return f(t.major,r.major)??f(t.#t,r.#t)??f(t.#r,r.#r)??function(t,r){if(t&&!r)return-1;if(!t&&r)return 1}(t.prefixed,r.prefixed)??0}static parse(t,r=!1){const e=t.match(/^\s*(?<v>v)?(?<major>\d+)(\.(?<minor>\d+)(\.(?<patch>\d+))?)?\s*$/)?.groups;if(e)return new p(e.major,e.minor,e.patch,Boolean(e.v)||!r)}static async resolveLastRelease(){const[t]=await p.resolveReleases();if(t)return m.coreExports.info(`Last tag resolved to ${t}`),t}static resolveNextRelease({lastTag:t,releaseType:r,stayAtZero:e}){return t?r?t.materialise().increment(r,e):t:e?"patch"===r?new p(0,0,1):new p(0,1,0):new p(1,0,0)}static async resolveReleases(){let t;try{t=await m.exec("git tag --list","getting last tag",!1)}catch{return[]}if(!t)return[];const r=t.split(/\r?\n/g).reduce(((t,r)=>{const e=p.parse(r,!0);return e&&t.push(e),t}),[]);return r.sort(p.cmp),r}get minor(){return this.#t??0}set minor(t){this.#t=t}get patch(){return this.#r??0}set patch(t){this.#r=t}computeReleaseType(t=new p(0,0,0)){return this.major>t.major?"major":this.minor>t.minor?"minor":this.patch>t.patch?"patch":void 0}increment(t,r=!1){switch(t){case"major":r&&0===this.major?++this.minor:(m.coreExports.notice(`stay-at-zero has no effect as we're already on version ${this}`),++this.major,this.minor=0),this.patch=0;break;case"minor":0!==this.major||r?++this.minor:(this.major=1,this.minor=0),this.patch=0;break;case"patch":++this.patch;break;default:throw new c(`Unrecognised release type: ${t}`)}return this}isEqual(t){return 0===p.cmp(this,t)}isGreaterThan(t){return-1===p.cmp(this,t)}isLowerThan(t){return 1===p.cmp(this,t)}materialise(){return new p(this.major,this.minor,this.patch)}toString(){return`${this.prefixed?"v":""}${[this.major,this.#t,this.#r].filter(u).join(".")}`}}function u(t){return null!=t}function l(t){if(null!=t)return isNaN(t)?0:Number(t)}function f(t,r){return null==t?null==r?h:1:null==r||t>r?-1:t<r?1:void 0}exports.SemVer=p}(require,Reflect,console,0,Error,JSON,Math,process,TypeError,void 0,Symbol);
