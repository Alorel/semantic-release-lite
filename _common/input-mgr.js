!function(t,e,r,o,s,n,i,u,c,p,a){"use strict";const l=t("./output-mgr.js"),f=a("Array type");class h{static ARRAY=f;#t=new Map;constructor(t){for(const[e,r]of o.entries(t)){if(e in this)throw new s(`Input name ${e} is reserved`);const t=d(e,r);if(t)this.#e(e,t);else if(Array.isArray(r)){const[t,o]=r;this.#e(e,d(e,t,o))}else this.#e(e,r)}}load(){for(const[t,e]of this.#t)l.coreExports.debug(`Loading ${t}`),o.defineProperty(this,t,{enumerable:!0,value:e()}),l.coreExports.info(`[OK] ${t}`);o.defineProperty(this,"load",{value:()=>this}),this.#t=p}#r(t){return this.load(),this[t]}#e(t,e){this.#t.set(t,e),o.defineProperty(this,t,{configurable:!0,enumerable:!0,get:()=>this.#r(t)})}}function d(t,e,r){switch(e){case f:return function(){return l.coreExports.getMultilineInput(t,r)};case Boolean:return function(){return l.coreExports.getBooleanInput(t,r)};case String:return function(){return l.coreExports.getInput(t,r)}}}l.__decorate([l.OutputGroup("Inputs")],h.prototype,"load",null),exports.InputMgrImpl=h}(require,Reflect,console,Object,Error,JSON,Math,process,TypeError,void 0,Symbol);
