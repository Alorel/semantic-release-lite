!function(e,t,s,o,n,r,c,a,l,m,u){"use strict";const i=e("../_common/output-mgr.js"),p=e("../_common/common-config.js"),g=e("../_common/input-mgr.js"),h=e("../_common/semver.js"),y=e("../_common/sync-check.js");e("child_process"),e("os"),e("fs"),e("path"),e("http"),e("https"),e("net"),e("tls"),e("events"),e("assert"),e("util"),e("../_common/github.js"),e("stream"),e("url"),e("punycode"),e("zlib");const d=i.OutputMgr;(async function(){const e=new p.TypesInputParser,t=new g.InputMgrImpl({...p.commonConfigInit(e),from:String,"last-tag"(){const e=i.coreExports.getInput("last-tag");if(e)return h.SemVer.parse(e)},until:String});t.load();const s=new p.CommitLoader(t.from,t.until);await s.load();const o=new d;o.set("commit-count",s.totalCount),o.set("relevant-commit-count",s.relevantCount);const n=new p.CommitParser(s,e,t);n.parse(),n.hasIssuesClosed?o.set("issues-closed",[...n.issuesClosed()].join(",")):i.coreExports.debug("No issues closed");const r=new p.ChangelogGenerator(n,e,t);await r.generate(t["last-tag"]),o.set("release-type",r.nextVersion.computeReleaseType(t["last-tag"])),o.set("changelog",r.result);try{await y.OutOfSyncError.check(),o.set("in-sync",!0)}catch{}o.get("release-type")&&o.has("in-sync")&&o.set("should-release",!0),o.log().flush()})().catch((e=>{i.coreExports.setFailed(e.message)}))}(require,Reflect,console,0,Error,JSON,Math,process,TypeError,0,Symbol);
