!function(e,t,s,o,n,r,c,a,i,l,m){"use strict";const u=e("./_common/exec.js"),p=e("./_common/common-config.js"),g=e("./_common/output-mgr.js"),h=e("./_common/sync-check.js"),d=e("./_common/semver.js");e("os"),e("fs"),e("path"),e("http"),e("https"),e("net"),e("tls"),e("events"),e("assert"),e("util"),e("child_process"),e("stream"),e("url"),e("punycode"),e("zlib");class y extends g.OutputMgr{log(){let e;for(const[t,s]of this)"changelog"===t?e=s:this.logOne(t,s);return e&&u.coreExports.info(`changelog:\n=====================\n${e}`),this}*virtualIter(){this.has("release-type","in-sync")&&(yield["should-release",!0]);const e=this.has("next-version")&&d.SemVer.parse(this.get("next-version"));e&&(yield["next-version-major",e.major],yield["next-version-minor",e.minor],yield["next-version-patch",e.patch])}}g.__decorate([g.OutputGroup("Outputs")],y.prototype,"log",null),async function(){const e=new p.TypesInputParser,t=new g.InputMgrImpl(p.commonConfigInit(e));t.load();const s=new y,o=await d.SemVer.resolveLastRelease();s.set("last-tag",o?.toString());const n=new p.CommitLoader(o);await n.load(),s.set("commit-count",n.totalCount),s.set("relevant-commit-count",n.relevantCount);const r=new p.CommitParser(n,e,t);r.parse(),s.set("release-type",r.releaseType),r.hasIssuesClosed?s.set("issues-closed",[...r.issuesClosed()].join(",")):u.coreExports.debug("No issues closed");const c=new p.ChangelogGenerator(r,e,t);await c.generate(o),s.set("next-version",c.nextVersion.toString()),s.set("changelog",c.result);try{await h.OutOfSyncError.check(),s.set("in-sync",!0)}catch{}s.log().flush()}().catch((e=>{u.coreExports.setFailed(u.coreExports.isDebug()?e.stack??e.message:e.message)}))}(require,Reflect,console,0,Error,JSON,Math,process,TypeError,0,Symbol);
